apply plugin: 'maven-publish'
apply plugin: 'signing'

/**
 * Uses the maven-publish plugin and a few custom tasks in order to generate, sign and publish
 * artifacts to the remote Maven repo defined inside expandableFabRelease (near bottom of page).
 *
 * Artifacts generated:
 * 1) Library AAR
 * 2) Source code JAR
 * 3) Documentation (JavaDoc, KDoc) in separate JARs
 * 4) The Gradle Module Metadata file
 * 5) The Maven POM file
 *
 * NOTE: Because of the issue described in 'generate-docs-and-update-website.gradle', we need to
 * run the 'publish' task without the Gradle Daemon. See the cmd below:
 *
 * ./gradlew --no-daemon clean publish
 *
 * Resources:
 * https://docs.gradle.org/current/userguide/publishing_setup.html (starting page of the guide)
 * https://docs.gradle.org/current/userguide/publishing_signing.html
 * https://docs.gradle.org/current/userguide/signing_plugin.html#sec:signatory_credentials
 * https://docs.gradle.org/current/userguide/publishing_maven.html
 * https://developer.android.com/studio/build/maven-publish-plugin
 * */

def mavenGroupId = "com.nambimobile.widgets"
def mavenArtifactId = archivesBaseName
def mavenVersion = android.defaultConfig.versionName

/**
 * Although also set in the MavenPublication task at the bottom of this page, version also needs to
 * be set here as some artifact generating tasks need it when constructing file names.
 * Example: generateJavaDocJar task generates a file named expandable-fab-[version]-javadoc.jar
 * */
version = mavenVersion


/**
 * Generates JAR artifacts for the documentation formats we support (see
 * 'generate-docs-and-update-website.gradle')
 * */
task generateJavaDocJar(type: Jar){
    dependsOn dokkaJavadoc
    archiveClassifier.set('javadoc')
    from javadocOutputDirectory.getAbsolutePath() // see 'generate-docs-and-update-website.gradle'
}
task generateKDocJar(type: Jar){
    dependsOn dokkaHtml
    archiveClassifier.set('kdoc')
    from kdocOutputDirectory.getAbsolutePath() // see 'generate-docs-and-update-website.gradle'
}

/** Generates a JAR of our source code. **/
task generateSourcesJar(type: Jar){
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

/**
 * Uses GnupgSignatory for signing every artifact within our maven publication defined below.
 * Password for the secret key will be pulled from the locally running gpg-agent for security
 * (other less sensitive properties it needs are still stored in your global gradle.properties).
 * */
signing {
    useGpgCmd()
    sign publishing.publications
}

/**
 * Creates a MavenPublication to assemble and deploy our artifacts and signatures to the repository
 * specified. Wrapped in 'afterEvaluate' as it's a requirement from the Android Gradle plugin if
 * wanting to use their AAR generated by 'from components.release':
 * https://developer.android.com/studio/build/maven-publish-plugin
 *
 * To run:
 *./gradlew --no-daemon clean publish
 * */
afterEvaluate {
    publishing {
        publications {
            expandableFabRelease(MavenPublication) {
                groupId = mavenGroupId
                artifactId = mavenArtifactId
                version = mavenVersion

                // Includes the library's release AAR to list of artifacts to be published
                from components.release

                // Adds our other artifacts to list to be published
                artifact generateJavaDocJar
                artifact generateKDocJar
                artifact generateSourcesJar

                // Metadata required by Maven Central for hosting. Stored in gradle.properties.
                // https://central.sonatype.org/pages/requirements.html#sufficient-metadata
                pom {
                    name = POM_NAME
                    description = POM_DESCRIPTION
                    url = POM_URL
                    packaging = POM_PACKAGING

                    licenses {
                        license {
                            name = POM_LICENSE_NAME
                            url = POM_LICENSE_URL
                            distribution = POM_LICENSE_DISTRIBUTION
                        }
                    }

                    developers {
                        developer {
                            name = POM_DEVELOPER_NAME
                            organization = POM_DEVELOPER_ORGANIZATION
                            organizationUrl = POM_DEVELOPER_URL
                        }
                    }

                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEVELOPER_CONNECTION
                        url = POM_SCM_URL
                    }
                }
            }
        }
    }
}